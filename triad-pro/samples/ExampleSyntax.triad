# === Macro definition ===
macro sparkle(level):
    # Double the input to amplify the "shine" factor
    let shine = level * 2
    echo "Shine level: " + shine
    return shine
end

# === Main executable capsule ===
capsule AgentMain [introspective, mutable]:
    Load   R1 Fastest #3        # Set register R1 to 3 (Fastest literal load)
    
    loop Deepest Repeat:        # Label 'Repeat' for loop start
        say  "✨"                # Output sparkle symbol
        mutate R1 Softest -1    # Decrement R1 softly (soft mutation = minimal energy change)
        jump Repeat Hardest if R1 > 0
    end

    let glow = sparkle(R1)      # Call macro 'sparkle' with current R1 value
    
    if glow > 4:
        tone Brightest "C#5"    # Play bright tone
    else:
        tone Softest "A3"       # Play soft tone
    end

    trace capsule               # Output runtime state, registers, and history
end


## How Triad interprets this syntax:

| Keyword / Symbol     | Purpose                                                          | Notes                                                       |
| -------------------- | ---------------------------------------------------------------- | ----------------------------------------------------------- |
| `macro`              | Defines a reusable code block with parameters                    | Compile-time, expands inline                                |
| `capsule`            | Self-contained execution unit                                    | Can be tagged (`[introspective, mutable]`)                  |
| `Load R1 Fastest #3` | Assign register `R1` value `3` using a load mode (`Fastest`)     | Load modes may affect instruction cost                      |
| `loop ... Repeat:`   | Defines a loop starting point with label                         | Used with `jump`                                            |
| `say`                | Outputs text or symbols to active output device                  | Unicode allowed                                             |
| `mutate`             | Alters register value                                            | Energy-weighted mutation (`Softest`, `Hardest`, etc.)       |
| `jump Repeat ... if` | Conditional branch to label                                      | Branch modes (`Hardest`, etc.) influence execution priority |
| `tone`               | Emits audio tone with a symbolic intensity                       | Format `"NoteOctave"`                                       |
| `trace capsule`      | Dumps execution trace, register values, and macro expansion data | Often used in introspective debugging                       |

macro sparkle(level):
  let shine = level * 2
  echo "Shine level: " + shine
  return shine
end

struct Point:
  let x: Int
  let y: Int
  func offset(dx: Int, dy: Int) -> Point:
    return Point { x: this.x + dx, y: this.y + dy }
  end
end

enum ErrorKind:
  NotFound
  IO(code: Int)
end

class Counter:
  let value: Int
  func init(start: Int): this.value = start end
  func inc() -> Int:
    this.value = this.value + 1
    return this.value
  end
end

capsule Demo [introspective, mutable]:
  Load R1 Fastest #3
  loop Deepest Repeat:
    say "✨"
    mutate R1 Softest -1
    jump Repeat Hardest if R1 > 0
  end

  let glow = sparkle(R1)
  if glow > 4:
    tone Brightest "C#5"
  else:
    tone Softest "A3"
  end

  try:
    let c = new Counter(start: 10)
    echo "count=" + c.inc()
  catch e as ErrorKind.IO:
    echo "I/O error: " + e.code
  finally:
    echo "cleanup"
  end

  trace capsule
end
