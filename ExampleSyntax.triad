# === Macro definition ===
macro sparkle(level):
    # Double the input to amplify the "shine" factor
    let shine = level * 2
    echo "Shine level: " + shine
    return shine
end

# === Main executable capsule ===
capsule AgentMain [introspective, mutable]:
    Load   R1 Fastest #3        # Set register R1 to 3 (Fastest literal load)
    
    loop Deepest Repeat:        # Label 'Repeat' for loop start
        say  "âœ¨"                # Output sparkle symbol
        mutate R1 Softest -1    # Decrement R1 softly (soft mutation = minimal energy change)
        jump Repeat Hardest if R1 > 0
    end

    let glow = sparkle(R1)      # Call macro 'sparkle' with current R1 value
    
    if glow > 4:
        tone Brightest "C#5"    # Play bright tone
    else:
        tone Softest "A3"       # Play soft tone
    end

    trace capsule               # Output runtime state, registers, and history
end


## How Triad interprets this syntax:

| Keyword / Symbol     | Purpose                                                          | Notes                                                       |
| -------------------- | ---------------------------------------------------------------- | ----------------------------------------------------------- |
| `macro`              | Defines a reusable code block with parameters                    | Compile-time, expands inline                                |
| `capsule`            | Self-contained execution unit                                    | Can be tagged (`[introspective, mutable]`)                  |
| `Load R1 Fastest #3` | Assign register `R1` value `3` using a load mode (`Fastest`)     | Load modes may affect instruction cost                      |
| `loop ... Repeat:`   | Defines a loop starting point with label                         | Used with `jump`                                            |
| `say`                | Outputs text or symbols to active output device                  | Unicode allowed                                             |
| `mutate`             | Alters register value                                            | Energy-weighted mutation (`Softest`, `Hardest`, etc.)       |
| `jump Repeat ... if` | Conditional branch to label                                      | Branch modes (`Hardest`, etc.) influence execution priority |
| `tone`               | Emits audio tone with a symbolic intensity                       | Format `"NoteOctave"`                                       |
| `trace capsule`      | Dumps execution trace, register values, and macro expansion data | Often used in introspective debugging                       |

